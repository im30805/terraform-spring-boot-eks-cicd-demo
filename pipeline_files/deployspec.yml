version: 0.2
phases:
  install: # Install kubectl, Helm, docker-compose, maven
    commands:
      - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.28.0/bin/linux/amd64/kubectl
      - chmod +x kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - curl -sSL https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
      - helm repo add stable https://charts.helm.sh/stable && helm repo update
      #- sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
      #- sudo chmod +x /usr/local/bin/docker-compose
      #- sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
      - sudo wget http://repos.fedorapeople.org/repos/dchen/apache-maven/epel-apache-maven.repo -O /etc/yum.repos.d/epel-apache-maven.repo
      - sudo sed -i s/\$releasever/6/g /etc/yum.repos.d/epel-apache-maven.repo
      - sudo yum install -y apache-maven

  pre_build: # Check helm version and Add kubeconfig to access to EKS cluster and check readiness of the cluster
    commands:
      - "helm version"
      #- "docker-compose version"
      - "mkdir ~/.kube/"
      - "aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $AWS_CLUSTER_NAME"
      - "chmod 0600 ~/.kube/config"
      - "aws sts get-caller-identity"

  build: # Deploy app via Helm / docker-compose
    commands:
      #- "helm upgrade -i $APP_NAME ./helm_charts -f helm_charts/values.yaml --set image.repository=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME --set image.tag=$IMAGE_TAG"
      #- "docker-compose ./spring-boot-sample-cluster-app/docker-compose.yml -p terraform-cicd-eks-project up"
      # - "kubectl apply -f ./spring-boot-sample-cluster-app/springboot-k8s-config.yaml"
      # - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/grafana-service.yaml"
      # - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/prometheus-service.yaml"
      # - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/grafana-deployment.yaml"
      # - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/grafana-claim0-persistentvolumeclaim.yaml"
      # - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/prometheus-deployment.yaml"
      # - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/prometheus-claim0-persistentvolumeclaim.yaml"
      #- "helm repo add prometheus-community https://prometheus-community.github.io/helm-charts"
      #- "helm repo update"
      #- "helm install -f ./spring-boot-sample-cluster-app/monitoring/helm_values.yaml prometheus prometheus-community/kube-prometheus-stack"
      - "kubectl apply -f ./spring-boot-sample-cluster-app/springboot-k8s-config.yaml"
      #- "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/prometheus_spring_boot.yaml"
      - "kubectl apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/bundle.yaml --force-conflicts=true --server-side=true"
      - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/prometheus_rbac.yaml"
      - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/prometheus_instance.yaml"
      #- "kubectl port-forward svc/prometheus-operated 9090:9090"
      - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/service_monitor.yaml"
      - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/grafana.yaml"
      #- "kubectl create deployment grafana --image=docker.io/grafana/grafana:latest"
      #- "kubectl expose deployment grafana --port 3000" # Create a service for the Grafana deployment
      #- "kubectl port-forward svc/grafana 3000:3000"
      - "kubectl apply -f ./spring-boot-sample-cluster-app/monitoring/expose_prometheus.yaml"
      
      
  post_build:
    commands:
      - bash -c "if [ /"$CODEBUILD_BUILD_SUCCEEDING/" == /"0/" ]; then exit 1; fi"